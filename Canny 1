{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Detekcja krawędzi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Cel ćwiczenia\n",
    "\n",
    "- Zapoznanie z metodami detekcji krawędzi:\n",
    "    - Sobel, Prewitt, Roberts - przypomnienie,\n",
    "    - Laplasjan z Gaussa (LoG – ang. Laplacian of Gaussian),\n",
    "    - Canny.\n",
    "\n",
    "Detekcja krawędzi przez wiele lat była podstawą algorytmów segmentacji.\n",
    "Krawędzie wykrywane są najczęściej z wykorzystaniem pierwszej (gradient) i drugiej (Laplasjan) pochodnej przestrzennej.\n",
    "Wykorzystanie obu metod zaprezentowane zostało w ćwiczeniu *Przetwarzanie wstępne. Filtracja kontekstowa*.\n",
    "\n",
    "W niniejszym ćwiczeniu poznane detektory krawędzi zostaną porównane z bardziej zaawansowanymi: Laplasjan z funkcji Gaussa (LoG), Zero Crossing i Canny."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Laplasjan z Gaussa (LoG)\n",
    "\n",
    "Funkcja Gaussa:<br>\n",
    "\\begin{equation}\n",
    "h(r) = e^{\\frac{-r^2}{2 \\sigma^2}}\n",
    "\\end{equation}<br>\n",
    "gdzie:\n",
    "- $r^2 = x^2 + y^2$\n",
    "- $\\sigma$ to odchylenie standardowe.\n",
    "\n",
    "Działanie filtracji Gaussowskiej zostało przedstawione w ćwiczeniu \"Przetwarzanie wstępne\". W jej wyniku następuje rozmazanie obrazu.\n",
    "Laplasjan tej funkcji dany jest wzorem:\n",
    "\n",
    "\\begin{equation}\n",
    "\\nabla^2 h(r) = \\frac{r^2 - 2\\sigma^2}{\\sigma^4} e^{-\\frac{r^2}{2\\sigma^2}}\n",
    "\\end{equation}\n",
    "\n",
    "Funkcję (z oczywistych powodów) nazywamy Laplasjan z Gaussa (LoG).\n",
    "Ponieważ druga pochodna jest operacją liniową, konwolucja obrazu z $\\nabla^2 h(r)$ daje taki sam efekt jak zastosowanie filtracji Gaussa na obrazie, a następnie obliczenie Laplasjanu z wyniku.\n",
    "Lokalizacja krawędzi polega na znalezieniu miejsca, gdzie po filtracji LoG następuje zmiana znaku.\n",
    "\n",
    "1. Wczytaj obraz *house.png*.\n",
    "2. Wykonaj rozmycie Gaussowskie obrazu wejściowego.\n",
    "W tym celu wykorzysaj funkcję `cv2.GaussianBlur(img, kSize, sigma)`.\n",
    "Pierwszy argument jest obrazem wejśćiowym.\n",
    "Drugi jest rozmiarem filtru (podanym w nawiasach okrągłych, np. *(3, 3)*).\n",
    "Trzecim argumentem jest odchylenie standardowe. Wartość jest dobrana automatycznie, jeśli zosanie podana wartość `0` (będą równe rozmiarowi).\n",
    "3. Oblicz laplasjan obrazu rozmytego.\n",
    "W tym celu wykorzysaj funkcję `cv2.Laplacian(img, ddepth)`.\n",
    "Pierszym argumentem jest obraz wejściowy.\n",
    "Drugim argumentem jest typ danych wejściowych. Użyj `cv2.CV_32F`.\n",
    "4. Wyznacz miejsca zmiany znaku.\n",
    "Zaimplementuj funkcję `crossing(LoG, thr)`:\n",
    "    - Najpierw stwórz tablicę, do której zostanie zapisany wynik.\n",
    "    Jej rozmiar jest taki sam jak przetwarzanego obrazu.\n",
    "    - Następnie wykonaj pętle po obrazie (bez ramki jednopikselowej).\n",
    "    W każdej iteracji stwórz otoczenie o rozmiarze $3 \\times 3$.\n",
    "    Dla otoczenia oblicz wartość maksymalną i minimalną.\n",
    "    - Jeśli wartości te mają przeciwne znaki, to do danego miejsca tablicy przypisz wartość:\n",
    "        - jeśli piksel wejściowy > 0, to dodaj do niego wartość bezwzględną minimum.\n",
    "        - jeśli piksel wejściowy < 0, to do jego wartości bezwzględnej dodaj maksimum.\n",
    "    - Zmień zakres wykonanej tablicy do $<0, 255>$.\n",
    "    - Wykonaj progowanie tablicy. Próg jest argumentem wejściowym.\n",
    "    - Przeskaluj dane binarne do wartości `[0, 255]`.\n",
    "    - Wykonaj konwersję do typu *uint8*.\n",
    "    - Wykonaj rozmycie medianowe wyniku.\n",
    "    Wykorzystaj funkcję `cv2.medianBlur(img, kSize)`.\n",
    "    Pierwszym argumentem jest obraz wejśćiowy, a drugim rozmiar filtra.\n",
    "    - Zwróć wyznaczoną tablicę.\n",
    "5. Wyświetl obraz wynikowy.\n",
    "6. Dobierz parametry (rozmiar filtru Gaussa, odchylenie standardowe, próg binaryzacji) tak, by widoczne były kontury domu, ale nie dachówki."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "pycharm": {
     "name": "#%% Zadanie 1 - LoG\n"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 834x1114 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import cv2\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import math\n",
    "import os\n",
    "import wget\n",
    "\n",
    "if not os.path.exists(\"dom.png\") :\n",
    "    wget.download(\"https://raw.githubusercontent.com/vision-agh/poc_sw/master/09_Canny/dom.png\")\n",
    "\n",
    "def display(img,ax=plt,title=None):\n",
    "    if ax==plt:\n",
    "        plt.figure(figsize=(img.shape[0]/100,img.shape[1]/100), dpi=200)\n",
    "        if title!=None:\n",
    "            plt.title(title)\n",
    "        plt.imshow(img)\n",
    "        plt.gray()\n",
    "        plt.xticks([]), plt.yticks([])  # Hides the graph ticks and x / y axis\n",
    "        plt.show()\n",
    "    else:\n",
    "        ax.imshow(img, 'gray', vmin=0, vmax=256)\n",
    "        ax.axis('off')\n",
    "        if title!=None:\n",
    "            ax.title.set_text(title)\n",
    "\n",
    "dom = cv2.imread('dom.png', cv2.IMREAD_GRAYSCALE)\n",
    "domBlur=cv2.GaussianBlur(dom,(5,7),10)\n",
    "domLap=cv2.Laplacian(domBlur, cv2.CV_32F)\n",
    "\n",
    "def crossing(LoG,thr):\n",
    "    tab=np.zeros(LoG.shape)\n",
    "    for i in range(1,LoG.shape[0]-1):\n",
    "        for j in range(1,LoG.shape[1]-1):\n",
    "            window=LoG[i-1:i+1,j-1:j+1]\n",
    "            maxx=np.max(window)\n",
    "            minn=np.min(window)\n",
    "            if maxx*minn<0:\n",
    "                if LoG[i,j]>0:\n",
    "                    tab[i,j]=LoG[i,j]-minn\n",
    "                elif LoG[i,j]<0:\n",
    "                    tab[i,j]=maxx-LoG[i,j]\n",
    "    tab=255*(tab+np.min(tab))/(np.max(tab)+np.min(tab))\n",
    "    tab=tab>thr\n",
    "    tab=(tab*255).astype('uint8')\n",
    "    return cv2.medianBlur(tab, 5)\n",
    "domLoG=crossing(domLap,45)\n",
    "display(domLoG)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Algorytm Canny'ego\n",
    "\n",
    "> Algorytm Canny'ego to często wykorzystywana metoda detekcji krawędzi.\n",
    "> Zaproponowana została w~1986r. przez Johna F. Cannego.\n",
    "> Przy jego projektowaniu założono trzy cele:\n",
    "> - niska liczba błędów - algorytm powinien znajdywać wszystkie krawędzie oraz generować jak najmniej fałszywych detekcji,\n",
    "> - punkty krawędziowe powinny być poprawnie lokalizowane - wykryte punkty powinny być jak najbardziej zbliżone do rzeczywistych,\n",
    "> - krawędzie o szerokości 1 piksela - algorytm powinien zwrócić jeden punkt dla każdej rzeczywistej krawędzi.\n",
    "\n",
    "Zaimplementuj pierwszą część algorytmu detekcji krawędzi Canny'ego:\n",
    "1. W pierwszym kroku obraz przefiltruj dwuwymiarowym filtrem Gaussa.\n",
    "2. Następnie oblicz gradient pionowy i poziomy ($g_x $ i $g_y$).\n",
    "Jedną z metod jest filtracja Sobela.\n",
    "3. Dalej oblicz amplitudę:\n",
    "$M(x,y)  = \\sqrt{g_x^2+g_y^2}$ oraz kąt:\n",
    "$\\alpha(x,y) = arctan(\\frac{g_y}{g_x})$.\n",
    "Do obliczenia kąta wykorzystaj funkcję `np.arctan2(x1, x2)`.\n",
    "Wynik jest w radianach.\n",
    "4. W kolejnym etapie wykonaj kwantyzację kątów gradientu.\n",
    "Kąty od $-180^\\circ$ do $180^\\circ$ można podzielić na 8 przedziałów:\n",
    "[$-22.5^\\circ, 22.5^\\circ$], [$22.5^\\circ, 67.5^\\circ$],\n",
    "[$67.5^\\circ, 112.5^\\circ$], [$112.5^\\circ, 157.5^\\circ$],\n",
    "[$157.5^\\circ, -157.5^\\circ$], [$-157.5^\\circ, -112.5^\\circ$],\n",
    "[$-112.5^\\circ, -67.5^\\circ$], [$-67.5^\\circ, -22.5^\\circ$].\n",
    "Przy czym należy rozpatrywać tylko 4 kierunki:\n",
    "    - pionowy ($d_1$),\n",
    "    - poziomy ($d_2$),\n",
    "    - skośny lewy ($d_3$),\n",
    "    - skośny prawy ($d_4$).\n",
    "5. Dalej przeprowadź eliminację pikseli, które nie mają wartości maksymalnej (ang. *nonmaximal suppresion*).\n",
    "Celem tej operacji jest redukcja szerokości krawędzi do rozmiaru 1 piksela.\n",
    "Algorytm przebiega następująco.\n",
    "W rozpatrywanym otoczeniu o rozmiarze $3 \\times 3$:\n",
    "    - określ do którego przedziału należy kierunek gradientu piksela centralnego ($d_1, d_2, d_3, d_4$).\n",
    "    - przeanalizuje sąsiadów leżących na tym kierunku.\n",
    "Jeśli choć jeden z nich ma amplitudę większą niż piksel centralny, to należy uznać, że nie jest lokalnym maksimum i do wyniku przypisać $g_N(x,y) = 0$.\n",
    "W przeciwnym przypadku $g_N(x,y) = M(x,y)$.\n",
    "Przez $g_N$ rozumiemy obraz detekcji lokalnych maksimów.\n",
    "Zaimplementuj funkcję `nonmax`.\n",
    "Pierwszym argementem jest macierz kierunków (po kwantyzacji).\n",
    "Drugim argumentem jest macierz amplitudy.\n",
    "6. Ostatnią operacją jest binaryzacja obrazu $g_N$.\n",
    "Stosuje się tutaj tzw. binaryzację z histerezą.\n",
    "Wykorzystuje się w niej dwa progi: $T_L$ i $T_H$, przy czym $T_L < T_H$.\n",
    "Canny zaproponował, aby stosunek progu wyższego do niższego był jak 3 lub 2 do 1.\n",
    "Rezultaty binaryzacji można opisać jako:<br>\n",
    "$g_{NH}(x,y) = g_N(x,y) \\geq TH $<br>\n",
    "$g_{NL}(x,y) = TH > g_N(x,y) \\geq TL $<br>\n",
    "Można powiedzieć, że na obrazie $g_{NH}$ są \"pewne\" krawędzie.\n",
    "Natomiast na $g_{NL}$ \"potencjalne\".\n",
    "7. Na jednym obrazie zaznacz piksele należące do obrazu $g_{NH}$ jako czerwone oraz należące do obrazu $g_{NL}$ jako niebieskie.\n",
    "Wyświetl obraz."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "pycharm": {
     "name": "#%% Zadanie 2 - Canny\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 834x1114 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "domBlur=cv2.GaussianBlur(dom,(3,3),2)\n",
    "def borders(img,kernel):\n",
    "    img=img.astype(float)\n",
    "    filtered=cv2.filter2D(img,-1,kernel).astype(float)\n",
    "    filteredAdd=filtered+128\n",
    "    return np.abs(filtered)\n",
    "gx=borders(domBlur,np.array([[-1,0,1],[-2,0,2],[-1,0,1]]))\n",
    "gy=borders(domBlur,np.array([[-1,0,1],[-2,0,2],[-1,0,1]]).T)\n",
    "\n",
    "M=np.sqrt(gx*gx+gy*gy)\n",
    "alpha=np.rad2deg(np.arctan(gx,gy))\n",
    "\n",
    "def direction(i,j):\n",
    "    angle=np.abs(alpha[i,j])\n",
    "    if angle<22.5 or angle>=157.5:\n",
    "        return 2\n",
    "    if angle>=22.5 and angle<67.5:\n",
    "        return 3\n",
    "    if angle>=67.5 and angle<112.5:\n",
    "        return 1\n",
    "    if angle>=112.5 and angle<157.5:\n",
    "        return 4\n",
    "\n",
    "directions=np.zeros(alpha.shape)\n",
    "for i in range(directions.shape[0]):\n",
    "    for j in range(directions.shape[1]):\n",
    "        directions[i,j]=direction(i,j)\n",
    "\n",
    "def nonmax(ang,mag):\n",
    "    gn=mag[:]\n",
    "    for i in range(1,gn.shape[0]-1):\n",
    "        for j in range(1,gn.shape[1]-1):\n",
    "            d=ang[i,j]\n",
    "            window=ang[i-1:i+1,j-1:j+1]==d\n",
    "            window=window*mag[i-1:i+1,j-1:j+1]\n",
    "            if mag[i,j]<np.max(window):\n",
    "                mag[i,j]=0\n",
    "    return gn\n",
    "gn=nonmax(directions,M)\n",
    "TL=85\n",
    "TH=170\n",
    "gnh=gn>=TH\n",
    "gnl=(gn>=TL) & (gn<TH)\n",
    "\n",
    "cannys=np.dstack((gnh,np.zeros(gnh.shape),gnl))\n",
    "\n",
    "plt.figure(figsize=(cannys.shape[0]/100,cannys.shape[1]/100), dpi=200)\n",
    "plt.imshow(cannys)\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Algorytm Canny'ego - OpenCV\n",
    "\n",
    "1. Wykonaj dektekcję krawędzi metodą Canny'ego wykorzystując funkcję `cv2.Canny`.\n",
    "    - Pierwszym argumentem funkcji jest obraz wejściowy.\n",
    "    - Drugim argumentem jest mniejszy próg.\n",
    "    - Trzecim argumentem jest większy próg.\n",
    "    - Czwarty argument to tablica, do której wpisany zostanie wynik.\n",
    "    Można zwrócić go przez wartość i podać wartość `None`.\n",
    "    - Piąty argument to rozmiar operatora Sobela (w naszym przypadku 3).\n",
    "    - Szósty argument to rodzaj używanej normy.\n",
    "    0 oznacza normę $L_1$, 1 oznacza normę $L_2$. Użyj $L_2$.\n",
    "2. Wynik wyświetl i porównaj z wykonaną częściową implementacją w poprzednim ćwiczeniu.\n",
    "Na czym polegają różnice?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "pycharm": {
     "name": "#%% Zadanie 3 - Canny opencv\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 834x1114 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(cv2.Canny(dom,85,170,None,3,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Różnice polegają na tym, że na pierwszym obrazie wyświetlone są zarówno krawędzie pewne i potencjalne. Poza tym pojawiają się przerwy w krawędziach i nie wszystkie krawędzie są widoczne (na przykłąd część dachu)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
